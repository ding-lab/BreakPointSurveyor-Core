#!/usr/bin/env Rscript

# Matthew Wyczalkowski
# m.wyczalkowski@wustl.edu
# The Genome Institute
#
# Usage: ggp2pdf [-v] [-h height] [-w width] data.ggp out.pdf
#
# Convert GGP (ggplot binary) file into pdf
#
# -v: verbose
# -h: height in inches of output PDF (default 6)
# -w: width in inches of output PDF (default 8)
#
# Part of the BreakpointSurvey project.

suppressPackageStartupMessages(library("ggplot2"))

# Return the command line argument associated with a given flag (i.e., -o foo),
# or the default value if argument not specified.
# Note that this will break if an argument is not supplied after the flag.
get_val_arg = function(args, flag, default) {
    ix = pmatch(flag, args)
    if (!is.na(ix)){ val = args[ix+1] } else { val = default }
    return(val)
}

# Return boolean specifying whether given flag appears in command line (i.e., -o),
get_bool_arg = function(args, flag) {
    ix = pmatch(flag, args)
    if (!is.na(ix)){ val = TRUE } else { val = FALSE }
    return(val)
}

# Usage: 
#   args = parse_args()
#   print(args$disease.filter)
parse_args = function() {
    args = commandArgs(trailingOnly = TRUE)

    # optional arguments
    verbose = get_bool_arg(args, "-v")
    height = get_val_arg(args, "-h", "6")
    width = get_val_arg(args, "-w", "8")

    # mandatory positional arguments.  These are popped off the back of the array, last one listed first.
    # one problem with this approach is that missing mandatory args are hard to catch
    out.fn = args[length(args)]; args = args[-length(args)]
    ggp.fn = args[length(args)]; args = args[-length(args)]

    val = list( 'verbose'=verbose, 'height'=as.numeric(height), 'width'=as.numeric(width),
                'out.fn'=out.fn, 'ggp.fn'=ggp.fn)
                
    if (val$verbose) { print(val) }

    return (val)
}


args = parse_args()
if (!file.exists(args$ggp.fn)) {
    stop(paste("GGP file", args$ggp.fn, "not found."))
}
data.ggp = readRDS(args$ggp.fn)   # http://www.fromthebottomoftheheap.net/2012/04/01/saving-and-loading-r-objects/

# Save
# By default R outputs PDF to Rplots.pdf.  To avoid littering we delete this.  Do not delete Rplots.pdf if that file
# already exists, though.
delete.Rplots = TRUE
if (file.exists("Rplots.pdf")) delete.Rplots=FALSE

# A dirty trick: ggsave will not save grobs, so mess with the the code directly.
# from http://stackoverflow.com/questions/18406991/saving-a-graph-with-ggsave-after-using-ggplot-build-and-ggplot-gtable
# ggsave = ggplot2::ggsave; body(ggsave) = body(ggplot2::ggsave)[-2]  

ggsave(plot=data.ggp, filename=args$out.fn, height=args$height, width=args$width, useDingbats=FALSE)
cat(sprintf("Saved to %s\n", args$out.fn))

if (delete.Rplots) {
    unlink("Rplots.pdf")
}

